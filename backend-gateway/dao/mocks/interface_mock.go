// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "backend-gateway/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// GetDbConn mocks base method.
func (m *MockStorage) GetDbConn(dbName string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbConn", dbName)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDbConn indicates an expected call of GetDbConn.
func (mr *MockStorageMockRecorder) GetDbConn(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbConn", reflect.TypeOf((*MockStorage)(nil).GetDbConn), dbName)
}

// GetDbTxn mocks base method.
func (m *MockStorage) GetDbTxn(dbName string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbTxn", dbName)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDbTxn indicates an expected call of GetDbTxn.
func (mr *MockStorageMockRecorder) GetDbTxn(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbTxn", reflect.TypeOf((*MockStorage)(nil).GetDbTxn), dbName)
}

// GetNFTGoods mocks base method.
func (m *MockStorage) GetNFTGoods(filter *model.GetNFTGoodsFilter) ([]*model.NFTGoods, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFTGoods", filter)
	ret0, _ := ret[0].([]*model.NFTGoods)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFTGoods indicates an expected call of GetNFTGoods.
func (mr *MockStorageMockRecorder) GetNFTGoods(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFTGoods", reflect.TypeOf((*MockStorage)(nil).GetNFTGoods), filter)
}

// SyncDB mocks base method.
func (m *MockStorage) SyncDB(dbName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SyncDB", dbName)
}

// SyncDB indicates an expected call of SyncDB.
func (mr *MockStorageMockRecorder) SyncDB(dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDB", reflect.TypeOf((*MockStorage)(nil).SyncDB), dbName)
}
